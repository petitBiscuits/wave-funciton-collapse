#pragma kernel Display

#include "/includes/Density.compute"
#include "/includes/Noise.compute"

static const int numThreads = 8;

RWStructuredBuffer<float4> vertex;

float3 centre;
float spacing;
float boundsSize;

[numthreads(numThreads,numThreads,numThreads)]
void Display (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis*2 || id.z >= numPointsPerAxis) {
        return;
    }
    
	float3 pos = centre + id * spacing;

    float noise = 0;

    int octaves = 5;
    float weightMultiplier = 0.8f;
    float persistence = 0.5f;
    float lacunarity = 2.0f;

    float noiseScale = 10;
    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j =0; j < octaves; j ++) {
        float n = snoise(pos * frequency);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    if(pos.y < 1)
	{
		noise = 2;
	}
    
    int index = indexFromCoord(id.x,id.y,id.z);
    vertex[index] = float4(pos,noise);
}
